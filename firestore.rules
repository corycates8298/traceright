/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and a resource-ownership model for other entities like suppliers, materials, orders, etc.
 * All data is stored in top-level collections (e.g., /users/{userId}, /suppliers/{supplierId}).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing user profiles is disallowed to prevent information leakage.
 * - Suppliers can manage their own documents in a subcollection.
 * - Other entities (materials, orders, products, etc.) are globally accessible for reading but require authentication for modification.
 * - Denormalization: To simplify security rules and improve performance, supplierId is present in both the supplier document and its subcollection of documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can read, update, or delete their own profile if the userId matches their auth UID.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) An authenticated user cannot access another user's profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
    }

    /**
     * @description Controls access to supplier data.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Any authenticated user can read supplier data.
     * @allow (create) Any authenticated user can create a supplier, and the supplierId must match the document id
     * @allow (update, delete) Only the supplier (identified by supplierId) can update or delete their own data.
     * @deny (create) An unauthenticated user cannot create a supplier.
     * @principle Allows public read access but restricts modification to the supplier.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.auth.uid == supplierId;
      allow update, delete: if isSignedIn() && request.auth.uid == supplierId;
    }

    /**
     * @description Controls access to documents associated with a supplier.
     * @path /suppliers/{supplierId}/documents/{documentId}
     * @allow (get, list) Any authenticated user can read documents of a supplier.
     * @allow (create) Any authenticated user can create a document for a supplier.
     * @allow (update, delete) Only the supplier can update or delete their documents.
     * @deny (create) An unauthenticated user cannot create a document.
     * @principle Allows public read access but restricts modification to the owning supplier.
     */
    match /suppliers/{supplierId}/documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == supplierId;
    }

    /**
     * @description Controls access to material data.
     * @path /materials/{materialId}
     * @allow (get, list) Any user can read material data.
     * @allow (create) Any authenticated user can create material data
     * @allow (update, delete) Only authenticated users can update or delete material data.
     * @deny (create) Unauthenticated users cannot create material data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to forecasts associated with a material.
     * @path /materials/{materialId}/forecasts/{forecastId}
     * @allow (get, list) Any user can read forecasts for a material.
     * @allow (create) Any authenticated user can create a forecast.
     * @allow (update, delete) Only authenticated users can update or delete forecasts.
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /materials/{materialId}/forecasts/{forecastId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to order data.
     * @path /orders/{orderId}
     * @allow (get, list) Any user can read order data.
     * @allow (create) Any authenticated user can create order data
     * @allow (update, delete) Only authenticated users can update or delete order data.
     *  @deny (create) Unauthenticated users cannot create order data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to UI schema data.
     * @path /uiSchemas/{uiSchemaId}
     * @allow (get, list) Any user can read UI schema data.
     * @allow (create) Any authenticated user can create UI schema data
     * @allow (update, delete) Only authenticated users can update or delete UI schema data.
     * @deny (create) Unauthenticated users cannot create UI schema data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /uiSchemas/{uiSchemaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to inventory data.
     * @path /inventory/{inventoryId}
     * @allow (get, list) Any user can read inventory data.
     * @allow (create) Any authenticated user can create inventory data
     * @allow (update, delete) Only authenticated users can update or delete inventory data.
     * @deny (create) Unauthenticated users cannot create inventory data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /inventory/{inventoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to product data.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product data.
     * @allow (create) Any authenticated user can create product data
     * @allow (update, delete) Only authenticated users can update or delete product data.
     * @deny (create) Unauthenticated users cannot create product data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Controls access to recipe data.
     * @path /recipes/{recipeId}
     * @allow (get, list) Any user can read recipe data.
     * @allow (create) Any authenticated user can create recipe data
     * @allow (update, delete) Only authenticated users can update or delete recipe data.
     * @deny (create) Unauthenticated users cannot create recipe data
     * @principle Allows public read access but restricts modification to authenticated users.
     */
    match /recipes/{recipeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the supplier resource
  function isSupplierOwner(supplierId) {
    return isSignedIn() && request.auth.uid == supplierId;
  }

  // Helper function to determine if the user is the owner of the resource and it exists
  function isExistingOwner(documentId) {
    return isSignedIn() && request.auth.uid == documentId && resource != null;
  }

  // Helper function to determine if the user is the owner of the supplier document
  function isSupplierDocumentOwner(supplierId, documentId) {
      return isSignedIn() && resource.data.supplierId == supplierId;
  }
}