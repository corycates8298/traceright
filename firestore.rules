/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model: user-owned data with some publicly readable collections.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, accessible only to the user themselves.
 * - Suppliers and their associated documents are stored under `/suppliers/{supplierId}`. Supplier documents are only listable by the supplier.
 * - Materials and their forecasts are stored under `/materials/{materialId}`. Material forecasts are only listable by the material.
 * - Orders, UI Schemas, Inventory, Products, and Recipes are publicly readable but only modifiable by authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to specific collections to simplify data consumption, with authenticated-user-only writes.
 *
 * Denormalization for Authorization:
 * - Not explicitly used in this ruleset, but consider adding fields like `ownerId` to publicly readable documents for simpler write rules.
 *
 * Structural Segregation:
 * - Private user data is segregated under the `/users/{userId}` collection, separate from public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete user 'user123's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages supplier data, ensuring only authenticated users can create, update, and delete supplier.
     * @path /suppliers/{supplierId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete a supplier.
     * @allow (get, list) Public can read list of suppliers.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a supplier.
     * @principle Authenticated users can create, update, and delete supplier documents.
     */
    match /suppliers/{supplierId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;

      /**
       * @description Manages documents related to a specific supplier.
       * @path /suppliers/{supplierId}/documents/{documentId}
       * @allow (create) Authenticated user can create a document for a supplier.
       * @allow (get, update, delete) Authenticated user can get, update, and delete a document for a supplier.
       * @allow (list) Authenticated user can list their documents.
       * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete supplier documents.
       * @principle Authenticated users can create, update, and delete documents for a specific supplier.
       */
      match /documents/{documentId} {
        allow get: if true;
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
      }
    }

    /**
     * @description Manages material data, ensuring only authenticated users can create, update, and delete material.
     * @path /materials/{materialId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete a material.
     * @allow (get, list) Public can read material.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete a material.
     * @principle Authenticated users can create, update, and delete material documents.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;

      /**
       * @description Manages forecasts related to a specific material.
       * @path /materials/{materialId}/forecasts/{forecastId}
       * @allow (create) Authenticated user can create a forecast for a material.
       * @allow (get, update, delete) Authenticated user can get, update, and delete a forecast for a material.
       * @allow (list) Authenticated user can list forecasts for a material.
       * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete material forecasts.
       * @principle Authenticated users can create, update, and delete forecasts for a specific material.
       */
      match /forecasts/{forecastId} {
        allow get: if true;
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
      }
    }

    /**
     * @description Manages order data, ensuring only authenticated users can create, update, and delete orders.
     * @path /orders/{orderId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete orders.
     * @allow (get, list) Public can read list of orders.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete orders.
     * @principle Authenticated users can create, update, and delete order documents.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages UI schema data, ensuring only authenticated users can create, update, and delete schemas.
     * @path /uiSchemas/{uiSchemaId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete UI schemas.
     * @allow (get, list) Public can read list of UI schemas.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete UI schemas.
     * @principle Authenticated users can create, update, and delete uiSchemas documents.
     */
    match /uiSchemas/{uiSchemaId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages inventory data, ensuring only authenticated users can create, update, and delete inventory.
     * @path /inventory/{inventoryId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete inventory.
     * @allow (get, list) Public can read list of inventory.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete inventory.
     * @principle Authenticated users can create, update, and delete inventory documents.
     */
    match /inventory/{inventoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages product data, ensuring only authenticated users can create, update, and delete products.
     * @path /products/{productId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete products.
     * @allow (get, list) Public can read list of products.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete products.
     * @principle Authenticated users can create, update, and delete product documents.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages recipe data, ensuring only authenticated users can create, update, and delete recipes.
     * @path /recipes/{recipeId}
     * @allow (create, update, delete) Authenticated user can create, update, and delete recipes.
     * @allow (get, list) Public can read list of recipes.
     * @deny (create, update, delete) Unauthenticated user cannot create, update, or delete recipes.
     * @principle Authenticated users can create, update, and delete recipe documents.
     */
    match /recipes/{recipeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}