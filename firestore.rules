/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of ownership-based and public-read/owner-write access patterns for a supply chain management application.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, with the document ID matching the Firebase Auth UID.
 * - Suppliers are stored under `/suppliers/{supplierId}`, with supplier-owned documents under `/suppliers/{supplierId}/documents/{documentId}`.
 * - Materials and their forecasts are stored under `/materials/{materialId}` and `/materials/{materialId}/forecasts/{forecastId}` respectively.
 * - Orders, UI Schemas, Inventory, Products, and Recipes are stored in top-level collections (`/orders/{orderId}`, etc.).
 *
 * Key Security Decisions:
 * - User profiles are strictly owner-readable and writable.
 * - Listing user profiles is disallowed for privacy.
 * - Supplier documents are owner-writable, with documents accessible only to the associated supplier.
 * - Read access is generally public for Materials, Orders, UI Schemas, Inventory, Products, and Recipes, but write access is restricted.
 * - The rules explicitly deny listing of the `/users` collection to prevent unauthorized access to user data.
 *
 * Denormalization for Authorization:
 * - The `supplierId` is used in the path for `/suppliers/{supplierId}/documents/{documentId}` to easily enforce supplier-specific access to documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @allow (get, update, delete) User with UID 'user_abc' can read/update/delete their profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_abc' cannot read/update/delete the profile at /users/user_xyz.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Prevent listing user profiles.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to supplier data.
     * @path /suppliers/{supplierId}
     * @allow (create, update, delete) User with UID matching supplierId can manage their supplier profile.
     * @deny (create, update, delete) User with UID not matching supplierId cannot manage supplier profiles.
     * @allow (get, list) Public read access to supplier profiles.
     * @principle Implements public read, owner-only write for suppliers.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(supplierId) {
        return request.auth.uid == supplierId;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(supplierId) ;
      allow update: if isSignedIn() && isOwner(supplierId);
      allow delete: if isSignedIn() && isOwner(supplierId);
    }

    /**
     * @description Controls access to documents associated with a supplier.
     * @path /suppliers/{supplierId}/documents/{documentId}
     * @allow (create) User with UID matching supplierId can create documents.
     * @deny (create) User with UID not matching supplierId cannot create supplier documents.
     * @allow (get, list, update, delete) User with UID matching supplierId can manage their supplier documents.
     * @deny (get, list, update, delete) User with UID not matching supplierId cannot manage supplier documents.
     * @principle Enforces supplier-specific ownership for document management.
     */
    match /suppliers/{supplierId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(supplierId) {
        return request.auth.uid == supplierId;
      }
      allow get, list: if isSignedIn() && isOwner(supplierId);
      allow create: if isSignedIn() && isOwner(supplierId);
      allow update: if isSignedIn() && isOwner(supplierId);
      allow delete: if isSignedIn() && isOwner(supplierId);
    }

    /**
     * @description Controls access to material data.
     * @path /materials/{materialId}
     * @allow (get, list) Public read access to material data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Material' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /materials/{materialId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to forecasts associated with a material.
     * @path /materials/{materialId}/forecasts/{forecastId}
     * @allow (get, list) Public read access to forecast data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Forecast' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /materials/{materialId}/forecasts/{forecastId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to order data.
     * @path /orders/{orderId}
     * @allow (get, list) Public read access to order data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Order' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /orders/{orderId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to UI schema data.
     * @path /uiSchemas/{uiSchemaId}
     * @allow (get, list) Public read access to UI schema data.
     * // CRITICAL: Cannot implement owner-only writes. The 'UiSchema' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /uiSchemas/{uiSchemaId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to inventory data.
     * @path /inventory/{inventoryId}
     * @allow (get, list) Public read access to inventory data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Inventory' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /inventory/{inventoryId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to product data.
     * @path /products/{productId}
     * @allow (get, list) Public read access to product data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Product' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to recipe data.
     * @path /recipes/{recipeId}
     * @allow (get, list) Public read access to recipe data.
     * // CRITICAL: Cannot implement owner-only writes. The 'Recipe' entity is missing an 'ownerId' or 'authorId' field.
     * @principle Provides public read access with restricted write access.
     */
    match /recipes/{recipeId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
  }
}