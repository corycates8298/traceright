/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-based and resource-based authorization for a supply chain management application.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information.
 * - `/suppliers/{supplierId}`: Stores supplier information.
 * - `/suppliers/{supplierId}/documents/{documentId}`: Stores documents related to suppliers.
 * - `/materials/{materialId}`: Stores material information.
 * - `/materials/{materialId}/forecasts/{forecastId}`: Stores forecast data related to materials.
 * - `/orders/{orderId}`: Stores order information.
 * - `/uiSchemas/{uiSchemaId}`: Stores UI schemas.
 * - `/inventory/{inventoryId}`: Stores inventory information.
 * - `/products/{productId}`: Stores product information.
 * - `/recipes/{recipeId}`: Stores recipe information.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Supplier documents are accessible by authenticated users.
 * - Subcollections under suppliers (documents) are only accessible to authenticated users.
 * - All other top-level collections (materials, orders, uiSchemas, inventory, products, recipes) are accessible by authenticated users.
 * - Data shape validation is relaxed to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - (Not explicitly used in this version, but crucial for future enhancements). Consider denormalizing ownership or role information directly into documents to avoid costly `get()` operations in security rules.  For example, adding a `supplierId` field to the `/orders/{orderId}` document would allow efficient owner-based access control for orders.
 *
 * Structural Segregation:
 * - The application does not currently segregate public vs. private data. All data is treated as requiring authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get) User with UID 'user123' can read their own profile document.
     * @allow (update) User with UID 'user123' can update their own profile document.
     * @allow (delete) User with UID 'user123' can delete their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile document of 'user123'.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) ;
      allow delete: if isOwner(userId) ;
    }

    /**
     * @description Controls access to supplier documents. Allows any authenticated user to read/write supplier data.
     * @path /suppliers/{supplierId}
     * @allow (create) Authenticated user can create a supplier document.
     * @allow (get) Authenticated user can read a supplier document.
     * @allow (update) Authenticated user can update a supplier document.
     * @allow (delete) Authenticated user can delete a supplier document.
     * @deny (create) Unauthenticated user cannot create a supplier document.
     * @deny (get) Unauthenticated user cannot read a supplier document.
     * @deny (update) Unauthenticated user cannot update a supplier document.
     * @deny (delete) Unauthenticated user cannot delete a supplier document.
     * @principle Allows authenticated users to manage supplier data.
     */
    match /suppliers/{supplierId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to documents related to a specific supplier. Allows any authenticated user to read/write supplier documents.
     * @path /suppliers/{supplierId}/documents/{documentId}
     * @allow (create) Authenticated user can create a document for a supplier.
     * @allow (get) Authenticated user can read a document for a supplier.
     * @allow (update) Authenticated user can update a document for a supplier.
     * @allow (delete) Authenticated user can delete a document for a supplier.
     * @deny (create) Unauthenticated user cannot create a document for a supplier.
     * @deny (get) Unauthenticated user cannot read a document for a supplier.
     * @deny (update) Unauthenticated user cannot update a document for a supplier.
     * @deny (delete) Unauthenticated user cannot delete a document for a supplier.
     * @principle Allows authenticated users to manage supplier-related documents.
     */
    match /suppliers/{supplierId}/documents/{documentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to material documents. Allows any authenticated user to read/write material data.
     * @path /materials/{materialId}
     * @allow (create) Authenticated user can create a material document.
     * @allow (get) Authenticated user can read a material document.
     * @allow (update) Authenticated user can update a material document.
     * @allow (delete) Authenticated user can delete a material document.
     * @deny (create) Unauthenticated user cannot create a material document.
     * @deny (get) Unauthenticated user cannot read a material document.
     * @deny (update) Unauthenticated user cannot update a material document.
     * @deny (delete) Unauthenticated user cannot delete a material document.
     * @principle Allows authenticated users to manage material data.
     */
    match /materials/{materialId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to forecast documents related to a specific material. Allows any authenticated user to read/write forecast data.
     * @path /materials/{materialId}/forecasts/{forecastId}
     * @allow (create) Authenticated user can create a forecast for a material.
     * @allow (get) Authenticated user can read a forecast for a material.
     * @allow (update) Authenticated user can update a forecast for a material.
     * @allow (delete) Authenticated user can delete a forecast for a material.
     * @deny (create) Unauthenticated user cannot create a forecast for a material.
     * @deny (get) Unauthenticated user cannot read a forecast for a material.
     * @deny (update) Unauthenticated user cannot update a forecast for a material.
     * @deny (delete) Unauthenticated user cannot delete a forecast for a material.
     * @principle Allows authenticated users to manage material forecasts.
     */
    match /materials/{materialId}/forecasts/{forecastId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to order documents. Allows any authenticated user to read/write order data.
     * @path /orders/{orderId}
     * @allow (create) Authenticated user can create an order document.
     * @allow (get) Authenticated user can read an order document.
     * @allow (update) Authenticated user can update an order document.
     * @allow (delete) Authenticated user can delete an order document.
     * @deny (create) Unauthenticated user cannot create an order document.
     * @deny (get) Unauthenticated user cannot read an order document.
     * @deny (update) Unauthenticated user cannot update an order document.
     * @deny (delete) Unauthenticated user cannot delete an order document.
     * @principle Allows authenticated users to manage order data.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to UI schema documents. Allows any authenticated user to read/write UI schema data.
     * @path /uiSchemas/{uiSchemaId}
     * @allow (create) Authenticated user can create a UI schema document.
     * @allow (get) Authenticated user can read a UI schema document.
     * @allow (update) Authenticated user can update a UI schema document.
     * @allow (delete) Authenticated user can delete a UI schema document.
     * @deny (create) Unauthenticated user cannot create a UI schema document.
     * @deny (get) Unauthenticated user cannot read a UI schema document.
     * @deny (update) Unauthenticated user cannot update a UI schema document.
     * @deny (delete) Unauthenticated user cannot delete a UI schema document.
     * @principle Allows authenticated users to manage UI schemas.
     */
    match /uiSchemas/{uiSchemaId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to inventory documents. Allows any authenticated user to read/write inventory data.
     * @path /inventory/{inventoryId}
     * @allow (create) Authenticated user can create an inventory document.
     * @allow (get) Authenticated user can read an inventory document.
     * @allow (update) Authenticated user can update an inventory document.
     * @allow (delete) Authenticated user can delete an inventory document.
     * @deny (create) Unauthenticated user cannot create an inventory document.
     * @deny (get) Unauthenticated user cannot read an inventory document.
     * @deny (update) Unauthenticated user cannot update an inventory document.
     * @deny (delete) Unauthenticated user cannot delete an inventory document.
     * @principle Allows authenticated users to manage inventory data.
     */
    match /inventory/{inventoryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to product documents. Allows any authenticated user to read/write product data.
     * @path /products/{productId}
     * @allow (create) Authenticated user can create a product document.
     * @allow (get) Authenticated user can read a product document.
     * @allow (update) Authenticated user can update a product document.
     * @allow (delete) Authenticated user can delete a product document.
     * @deny (create) Unauthenticated user cannot create a product document.
     * @deny (get) Unauthenticated user cannot read a product document.
     * @deny (update) Unauthenticated user cannot update a product document.
     * @deny (delete) Unauthenticated user cannot delete a product document.
     * @principle Allows authenticated users to manage product data.
     */
    match /products/{productId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to recipe documents. Allows any authenticated user to read/write recipe data.
     * @path /recipes/{recipeId}
     * @allow (create) Authenticated user can create a recipe document.
     * @allow (get) Authenticated user can read a recipe document.
     * @allow (update) Authenticated user can update a recipe document.
     * @allow (delete) Authenticated user can delete a recipe document.
     * @deny (create) Unauthenticated user cannot create a recipe document.
     * @deny (get) Unauthenticated user cannot read a recipe document.
     * @deny (update) Unauthenticated user cannot update a recipe document.
     * @deny (delete) Unauthenticated user cannot delete a recipe document.
     * @principle Allows authenticated users to manage recipe data.
     */
    match /recipes/{recipeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}