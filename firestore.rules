/**
 * @fileoverview Firestore Security Rules for Supply Chain Management App
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access to data based on user roles and ownership.
 * It aims to strike a balance between strict authorization and flexibility for rapid prototyping.
 *
 * Data Structure:
 * - Users: `/users/{userId}` - Stores user profiles, with `userId` matching the Firebase Auth UID.
 * - Suppliers: `/suppliers/{supplierId}` - Stores supplier information.
 * - Supplier Documents: `/suppliers/{supplierId}/documents/{documentId}` - Documents associated with a supplier.
 * - Materials: `/materials/{materialId}` - Stores material information.
 * - Material Forecasts: `/materials/{materialId}/forecasts/{forecastId}` - Forecasts for a specific material.
 * - Orders: `/orders/{orderId}` - Stores order information.
 * - UI Schemas: `/uiSchemas/{uiSchemaId}` - Stores UI schemas.
 * - Inventory: `/inventory/{inventoryId}` - Stores inventory information.
 * - Products: `/products/{productId}` - Stores product information.
 * - Recipes: `/recipes/{recipeId}` - Stores recipe information.
 *
 * Key Security Decisions:
 * - User profiles are only accessible and modifiable by the owning user.
 * - Subcollections (e.g., `/suppliers/{supplierId}/documents/{documentId}`) inherit the parent's ownership.
 * - Listing of user documents is allowed only for the owning user.
 * - No global admin roles are defined in this prototype; all data access is owner-based.
 * - Data shape validation is minimized to allow for flexible data model changes during prototyping.
 *
 * Denormalization for Authorization:
 *  - None implemented in this version. Consider adding `supplierId` to `Document` to simplify rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, or delete their profile if the userId matches their auth.uid.
     * @deny (create, get, update, delete) - Any operation if the userId does not match the authenticated user's UID.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing user documents is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Ensure immutability of user ID
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages supplier information.
     * @path /suppliers/{supplierId}
     * @allow (create) - Authenticated user can create a supplier.  Should ideally validate an owner ID.
     * @allow (get, list) - Any user can read supplier information.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to supplier data.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages documents associated with a supplier.
     * @path /suppliers/{supplierId}/documents/{documentId}
     * @allow (create) - Authenticated user can create a document under a supplier. Should ideally validate owner ID and supplier ID.
     * @allow (get, list) - Any user can read documents for a supplier.
     * @allow (update, delete) - Only the owner of the supplier can update or delete documents. Should ideally validate owner ID and supplier ID.
     * @deny (create, update, delete) - If not authenticated, not the owner, or supplier ID mismatch.
     * @principle Inherits ownership from the parent supplier.
     */
    match /suppliers/{supplierId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages material information.
     * @path /materials/{materialId}
     * @allow (get, list) - Any user can read material information.
     * @allow (create) - Authenticated user can create a material.  Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to material data.
     */
    match /materials/{materialId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages forecasts associated with a material.
     * @path /materials/{materialId}/forecasts/{forecastId}
     * @allow (get, list) - Any user can read forecasts for a material.
     * @allow (create) - Authenticated user can create a forecast under a material.  Should ideally validate owner ID and material ID.
     * @allow (update, delete) - Only the owner of the material can update or delete forecasts.  Should ideally validate owner ID and material ID.
     * @deny (create, update, delete) - If not authenticated, not the owner, or material ID mismatch.
     * @principle Inherits ownership from the parent material.
     */
    match /materials/{materialId}/forecasts/{forecastId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages order information.
     * @path /orders/{orderId}
     * @allow (get, list) - Any user can read order information.
     * @allow (create) - Authenticated user can create an order. Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to order data.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages UI schemas.
     * @path /uiSchemas/{uiSchemaId}
     * @allow (get, list) - Any user can read UI schemas.
     * @allow (create) - Authenticated user can create a UI schema.  Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to UI schema data.
     */
    match /uiSchemas/{uiSchemaId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages inventory information.
     * @path /inventory/{inventoryId}
     * @allow (get, list) - Any user can read inventory information.
     * @allow (create) - Authenticated user can create inventory.  Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to inventory data.
     */
    match /inventory/{inventoryId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages product information.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @allow (create) - Authenticated user can create a product.  Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to product data.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages recipe information.
     * @path /recipes/{recipeId}
     * @allow (get, list) - Any user can read recipe information.
     * @allow (create) - Authenticated user can create a recipe.  Should ideally validate an owner ID.
     * @allow (update, delete) - Only the owner can update or delete. Should ideally validate an owner ID.
     * @deny (create, update, delete) - If not authenticated or not the owner.
     * @principle Public read, owner-only write access to recipe data.
     */
    match /recipes/{recipeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();  // CRITICAL: Cannot implement owner-only writes. The 'Recipe' entity is missing an 'ownerId' or 'authorId' field.
      allow update: if isSignedIn(); // CRITICAL: Cannot implement owner-only writes. The 'Recipe' entity is missing an 'ownerId' or 'authorId' field.
      allow delete: if isSignedIn(); // CRITICAL: Cannot implement owner-only writes. The 'Recipe' entity is missing an 'ownerId' or 'authorId' field.
    }
  }
}